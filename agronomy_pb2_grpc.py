# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import agronomy_pb2 as agronomy__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AgronomyServiceStub(object):
    """*
    Service for handling agronomy space recommendations and sampling.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMicroNutrientOptions = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetMicroNutrientOptions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.MicroNutrientOptionsResponse.FromString,
                )
        self.GetNutrientOptions = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutrientOptions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.NutrientOptionsResponse.FromString,
                )
        self.GetNutrientCrops = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutrientCrops',
                request_serializer=agronomy__pb2.NutrientCropsRequest.SerializeToString,
                response_deserializer=agronomy__pb2.NutrientCropsResponse.FromString,
                )
        self.GetNutrientCropYieldUnits = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutrientCropYieldUnits',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.NutrientCropYieldUnitsResponse.FromString,
                )
        self.GetNutrientSampleTestMethods = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutrientSampleTestMethods',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.NutrientSampleTestMethodsResponse.FromString,
                )
        self.GetNutrientSoilTextures = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutrientSoilTextures',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.NutrientSoilTexturesResponse.FromString,
                )
        self.GetRegions = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetRegions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.RegionResponse.FromString,
                )
        self.GetRotations = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetRotations',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.RotationResponse.FromString,
                )
        self.RecommendMicroNutrient = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/RecommendMicroNutrient',
                request_serializer=agronomy__pb2.MicroNutrientRequest.SerializeToString,
                response_deserializer=agronomy__pb2.MicroNutrientRecommendationResponse.FromString,
                )
        self.RecommendNutrient = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/RecommendNutrient',
                request_serializer=agronomy__pb2.NutrientRequest.SerializeToString,
                response_deserializer=agronomy__pb2.NutrientRecommendationResponse.FromString,
                )
        self.RecommendMRTN = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/RecommendMRTN',
                request_serializer=agronomy__pb2.MRTNRequest.SerializeToString,
                response_deserializer=agronomy__pb2.MRTNRecommendationResponse.FromString,
                )
        self.GetEchelonBranchesByUser = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonBranchesByUser',
                request_serializer=agronomy__pb2.BranchListRequest.SerializeToString,
                response_deserializer=agronomy__pb2.BranchListResponse.FromString,
                )
        self.GetEchelonGrowersByBranch = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonGrowersByBranch',
                request_serializer=agronomy__pb2.GrowerListRequest.SerializeToString,
                response_deserializer=agronomy__pb2.GrowerListResponse.FromString,
                )
        self.GetEchelonGrowersByName = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonGrowersByName',
                request_serializer=agronomy__pb2.GrowerListByNameRequest.SerializeToString,
                response_deserializer=agronomy__pb2.GrowerListResponse.FromString,
                )
        self.GetEchelonGrowersLikeName = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonGrowersLikeName',
                request_serializer=agronomy__pb2.GrowerListByNameRequest.SerializeToString,
                response_deserializer=agronomy__pb2.GrowerListResponse.FromString,
                )
        self.GetEchelonFarmsByGrower = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonFarmsByGrower',
                request_serializer=agronomy__pb2.FarmListRequest.SerializeToString,
                response_deserializer=agronomy__pb2.FarmListResponse.FromString,
                )
        self.GetSeasonalReport = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetSeasonalReport',
                request_serializer=agronomy__pb2.SeasonalReportRequest.SerializeToString,
                response_deserializer=agronomy__pb2.SeasonalReportResponse.FromString,
                )
        self.GetEchelonOrganizationsByUser = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonOrganizationsByUser',
                request_serializer=agronomy__pb2.OrganizationListRequest.SerializeToString,
                response_deserializer=agronomy__pb2.OrganizationListResponse.FromString,
                )
        self.GetEchelonOrganizationSchema = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonOrganizationSchema',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agronomy__pb2.OrganizationSchemeResponse.FromString,
                )
        self.GetEchelonFieldsByFarm = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldsByFarm',
                request_serializer=agronomy__pb2.FieldListRequest.SerializeToString,
                response_deserializer=agronomy__pb2.FieldListResponse.FromString,
                )
        self.GetEchelonFieldsByGrowerFieldName = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldsByGrowerFieldName',
                request_serializer=agronomy__pb2.FieldListByGrowerRequest.SerializeToString,
                response_deserializer=agronomy__pb2.FieldListResponse.FromString,
                )
        self.GetEchelonFieldsByGrowerContainsFieldName = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldsByGrowerContainsFieldName',
                request_serializer=agronomy__pb2.FieldListByGrowerRequest.SerializeToString,
                response_deserializer=agronomy__pb2.FieldListResponse.FromString,
                )
        self.GetEchelonFieldById = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldById',
                request_serializer=agronomy__pb2.FieldByIdRequest.SerializeToString,
                response_deserializer=agronomy__pb2.FieldByIdResponse.FromString,
                )
        self.GetUniqueLabId = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueLabId',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueMethodNo = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueMethodNo',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueRatingMethod = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueRatingMethod',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueAnalyte = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueAnalyte',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueExtraction = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueExtraction',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueCEC = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueCEC',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueDependenceVar = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueDependenceVar',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueDependenceVal = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueDependenceVal',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueVL = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueVL',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueL = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueL',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueM = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueM',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueO = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueO',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueVH = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueVH',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetUniqueXH = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetUniqueXH',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetLabData = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetLabData',
                request_serializer=agronomy__pb2.WaypointDataRequest.SerializeToString,
                response_deserializer=agronomy__pb2.WaypointDataResponse.FromString,
                )
        self.GetNutriScriptionSample = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutriScriptionSample',
                request_serializer=agronomy__pb2.NutriScriptionSampleRequest.SerializeToString,
                response_deserializer=agronomy__pb2.NutriScriptionSampleResponse.FromString,
                )
        self.GetNutriScriptionSamples = channel.unary_unary(
                '/doorway.agronomy.v1.AgronomyService/GetNutriScriptionSamples',
                request_serializer=agronomy__pb2.NutriScriptionSamplesRequest.SerializeToString,
                response_deserializer=agronomy__pb2.NutriScriptionSamplesResponse.FromString,
                )


class AgronomyServiceServicer(object):
    """*
    Service for handling agronomy space recommendations and sampling.

    """

    def GetMicroNutrientOptions(self, request, context):
        """Option Lists
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutrientOptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutrientCrops(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutrientCropYieldUnits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutrientSampleTestMethods(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutrientSoilTextures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRotations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecommendMicroNutrient(self, request, context):
        """Agronomy Recommendations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecommendNutrient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecommendMRTN(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonBranchesByUser(self, request, context):
        """Echelon
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonGrowersByBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonGrowersByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonGrowersLikeName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonFarmsByGrower(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSeasonalReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonOrganizationsByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonOrganizationSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonFieldsByFarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonFieldsByGrowerFieldName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonFieldsByGrowerContainsFieldName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEchelonFieldById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueLabId(self, request, context):
        """Waypoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueMethodNo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueRatingMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueAnalyte(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueExtraction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueCEC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueDependenceVar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueDependenceVal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueVL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueVH(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUniqueXH(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutriScriptionSample(self, request, context):
        """/ Used to get nutriscription sample by id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNutriScriptionSamples(self, request, context):
        """/ Used to filter nutriscription samples by filteration criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgronomyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMicroNutrientOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMicroNutrientOptions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.MicroNutrientOptionsResponse.SerializeToString,
            ),
            'GetNutrientOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutrientOptions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.NutrientOptionsResponse.SerializeToString,
            ),
            'GetNutrientCrops': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutrientCrops,
                    request_deserializer=agronomy__pb2.NutrientCropsRequest.FromString,
                    response_serializer=agronomy__pb2.NutrientCropsResponse.SerializeToString,
            ),
            'GetNutrientCropYieldUnits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutrientCropYieldUnits,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.NutrientCropYieldUnitsResponse.SerializeToString,
            ),
            'GetNutrientSampleTestMethods': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutrientSampleTestMethods,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.NutrientSampleTestMethodsResponse.SerializeToString,
            ),
            'GetNutrientSoilTextures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutrientSoilTextures,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.NutrientSoilTexturesResponse.SerializeToString,
            ),
            'GetRegions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.RegionResponse.SerializeToString,
            ),
            'GetRotations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRotations,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.RotationResponse.SerializeToString,
            ),
            'RecommendMicroNutrient': grpc.unary_unary_rpc_method_handler(
                    servicer.RecommendMicroNutrient,
                    request_deserializer=agronomy__pb2.MicroNutrientRequest.FromString,
                    response_serializer=agronomy__pb2.MicroNutrientRecommendationResponse.SerializeToString,
            ),
            'RecommendNutrient': grpc.unary_unary_rpc_method_handler(
                    servicer.RecommendNutrient,
                    request_deserializer=agronomy__pb2.NutrientRequest.FromString,
                    response_serializer=agronomy__pb2.NutrientRecommendationResponse.SerializeToString,
            ),
            'RecommendMRTN': grpc.unary_unary_rpc_method_handler(
                    servicer.RecommendMRTN,
                    request_deserializer=agronomy__pb2.MRTNRequest.FromString,
                    response_serializer=agronomy__pb2.MRTNRecommendationResponse.SerializeToString,
            ),
            'GetEchelonBranchesByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonBranchesByUser,
                    request_deserializer=agronomy__pb2.BranchListRequest.FromString,
                    response_serializer=agronomy__pb2.BranchListResponse.SerializeToString,
            ),
            'GetEchelonGrowersByBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonGrowersByBranch,
                    request_deserializer=agronomy__pb2.GrowerListRequest.FromString,
                    response_serializer=agronomy__pb2.GrowerListResponse.SerializeToString,
            ),
            'GetEchelonGrowersByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonGrowersByName,
                    request_deserializer=agronomy__pb2.GrowerListByNameRequest.FromString,
                    response_serializer=agronomy__pb2.GrowerListResponse.SerializeToString,
            ),
            'GetEchelonGrowersLikeName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonGrowersLikeName,
                    request_deserializer=agronomy__pb2.GrowerListByNameRequest.FromString,
                    response_serializer=agronomy__pb2.GrowerListResponse.SerializeToString,
            ),
            'GetEchelonFarmsByGrower': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonFarmsByGrower,
                    request_deserializer=agronomy__pb2.FarmListRequest.FromString,
                    response_serializer=agronomy__pb2.FarmListResponse.SerializeToString,
            ),
            'GetSeasonalReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSeasonalReport,
                    request_deserializer=agronomy__pb2.SeasonalReportRequest.FromString,
                    response_serializer=agronomy__pb2.SeasonalReportResponse.SerializeToString,
            ),
            'GetEchelonOrganizationsByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonOrganizationsByUser,
                    request_deserializer=agronomy__pb2.OrganizationListRequest.FromString,
                    response_serializer=agronomy__pb2.OrganizationListResponse.SerializeToString,
            ),
            'GetEchelonOrganizationSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonOrganizationSchema,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agronomy__pb2.OrganizationSchemeResponse.SerializeToString,
            ),
            'GetEchelonFieldsByFarm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonFieldsByFarm,
                    request_deserializer=agronomy__pb2.FieldListRequest.FromString,
                    response_serializer=agronomy__pb2.FieldListResponse.SerializeToString,
            ),
            'GetEchelonFieldsByGrowerFieldName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonFieldsByGrowerFieldName,
                    request_deserializer=agronomy__pb2.FieldListByGrowerRequest.FromString,
                    response_serializer=agronomy__pb2.FieldListResponse.SerializeToString,
            ),
            'GetEchelonFieldsByGrowerContainsFieldName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonFieldsByGrowerContainsFieldName,
                    request_deserializer=agronomy__pb2.FieldListByGrowerRequest.FromString,
                    response_serializer=agronomy__pb2.FieldListResponse.SerializeToString,
            ),
            'GetEchelonFieldById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEchelonFieldById,
                    request_deserializer=agronomy__pb2.FieldByIdRequest.FromString,
                    response_serializer=agronomy__pb2.FieldByIdResponse.SerializeToString,
            ),
            'GetUniqueLabId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueLabId,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueMethodNo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueMethodNo,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueRatingMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueRatingMethod,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueAnalyte': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueAnalyte,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueExtraction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueExtraction,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueCEC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueCEC,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueDependenceVar': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueDependenceVar,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueDependenceVal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueDependenceVal,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueVL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueVL,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueL,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueM': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueM,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueO,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueVH': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueVH,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetUniqueXH': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUniqueXH,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetLabData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabData,
                    request_deserializer=agronomy__pb2.WaypointDataRequest.FromString,
                    response_serializer=agronomy__pb2.WaypointDataResponse.SerializeToString,
            ),
            'GetNutriScriptionSample': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutriScriptionSample,
                    request_deserializer=agronomy__pb2.NutriScriptionSampleRequest.FromString,
                    response_serializer=agronomy__pb2.NutriScriptionSampleResponse.SerializeToString,
            ),
            'GetNutriScriptionSamples': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNutriScriptionSamples,
                    request_deserializer=agronomy__pb2.NutriScriptionSamplesRequest.FromString,
                    response_serializer=agronomy__pb2.NutriScriptionSamplesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'doorway.agronomy.v1.AgronomyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgronomyService(object):
    """*
    Service for handling agronomy space recommendations and sampling.

    """

    @staticmethod
    def GetMicroNutrientOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetMicroNutrientOptions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.MicroNutrientOptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutrientOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutrientOptions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.NutrientOptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutrientCrops(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutrientCrops',
            agronomy__pb2.NutrientCropsRequest.SerializeToString,
            agronomy__pb2.NutrientCropsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutrientCropYieldUnits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutrientCropYieldUnits',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.NutrientCropYieldUnitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutrientSampleTestMethods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutrientSampleTestMethods',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.NutrientSampleTestMethodsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutrientSoilTextures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutrientSoilTextures',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.NutrientSoilTexturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetRegions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.RegionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRotations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetRotations',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.RotationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecommendMicroNutrient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/RecommendMicroNutrient',
            agronomy__pb2.MicroNutrientRequest.SerializeToString,
            agronomy__pb2.MicroNutrientRecommendationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecommendNutrient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/RecommendNutrient',
            agronomy__pb2.NutrientRequest.SerializeToString,
            agronomy__pb2.NutrientRecommendationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecommendMRTN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/RecommendMRTN',
            agronomy__pb2.MRTNRequest.SerializeToString,
            agronomy__pb2.MRTNRecommendationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonBranchesByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonBranchesByUser',
            agronomy__pb2.BranchListRequest.SerializeToString,
            agronomy__pb2.BranchListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonGrowersByBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonGrowersByBranch',
            agronomy__pb2.GrowerListRequest.SerializeToString,
            agronomy__pb2.GrowerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonGrowersByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonGrowersByName',
            agronomy__pb2.GrowerListByNameRequest.SerializeToString,
            agronomy__pb2.GrowerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonGrowersLikeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonGrowersLikeName',
            agronomy__pb2.GrowerListByNameRequest.SerializeToString,
            agronomy__pb2.GrowerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonFarmsByGrower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonFarmsByGrower',
            agronomy__pb2.FarmListRequest.SerializeToString,
            agronomy__pb2.FarmListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSeasonalReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetSeasonalReport',
            agronomy__pb2.SeasonalReportRequest.SerializeToString,
            agronomy__pb2.SeasonalReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonOrganizationsByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonOrganizationsByUser',
            agronomy__pb2.OrganizationListRequest.SerializeToString,
            agronomy__pb2.OrganizationListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonOrganizationSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonOrganizationSchema',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agronomy__pb2.OrganizationSchemeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonFieldsByFarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldsByFarm',
            agronomy__pb2.FieldListRequest.SerializeToString,
            agronomy__pb2.FieldListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonFieldsByGrowerFieldName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldsByGrowerFieldName',
            agronomy__pb2.FieldListByGrowerRequest.SerializeToString,
            agronomy__pb2.FieldListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonFieldsByGrowerContainsFieldName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldsByGrowerContainsFieldName',
            agronomy__pb2.FieldListByGrowerRequest.SerializeToString,
            agronomy__pb2.FieldListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEchelonFieldById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetEchelonFieldById',
            agronomy__pb2.FieldByIdRequest.SerializeToString,
            agronomy__pb2.FieldByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueLabId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueLabId',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueMethodNo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueMethodNo',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueRatingMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueRatingMethod',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueAnalyte(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueAnalyte',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueExtraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueExtraction',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueCEC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueCEC',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueDependenceVar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueDependenceVar',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueDependenceVal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueDependenceVal',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueVL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueVL',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueL',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueM',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueO',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueVH(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueVH',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUniqueXH(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetUniqueXH',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetLabData',
            agronomy__pb2.WaypointDataRequest.SerializeToString,
            agronomy__pb2.WaypointDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutriScriptionSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutriScriptionSample',
            agronomy__pb2.NutriScriptionSampleRequest.SerializeToString,
            agronomy__pb2.NutriScriptionSampleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNutriScriptionSamples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doorway.agronomy.v1.AgronomyService/GetNutriScriptionSamples',
            agronomy__pb2.NutriScriptionSamplesRequest.SerializeToString,
            agronomy__pb2.NutriScriptionSamplesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
